<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.Spring_Project.mapper.ProductMapper">

    <select id="getProducts" resultType="com.example.Spring_Project.dto.ProductDTO">

        <!--        SELECT pd_seq,-->
        <!--        name,-->
        <!--        description,-->
        <!--        price,-->
        <!--        stock,-->
        <!--        status,-->
        <!--        img,-->
        <!--        category-->
        <!--        FROM (-->
        <!--        SELECT ROWNUM rn, a.*-->
        <!--        FROM-->
        <!--        (select-->
        <!--        pd_seq,-->
        <!--        name,-->
        <!--        description,-->
        <!--        price,-->
        <!--        stock,-->
        <!--        status,-->
        <!--        img,-->
        <!--        category-->
        <!--        from product-->
        <!--        where status = 'Y' ORDER BY 1 desc) a)-->
        <!--        WHERE rn BETWEEN #{start} AND #{end}-->

        SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category
        FROM (
        SELECT ROWNUM rn, a.*
        from
        (select
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category
        from product
        <!--        where status = 'Y'-->
        <if test="keyword != null">
            where LOWER(name) like '%'||#{keyword}||'%'
        </if>
        order by 1 desc
        )a) b WHERE rn BETWEEN #{start} AND #{end}
    </select>

    <select id="getProductDetail" resultType="com.example.Spring_Project.dto.ProductDTO">
        select
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category,
        point
        from product
        where pd_seq=#{pd_seq}
    </select>


    <select id="getWProduct" resultType="com.example.Spring_Project.dto.ProductDTO">
        SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category
        FROM PRODUCT p WHERE category IN (
        SELECT category_seq FROM category
        WHERE PARENT_CATEGORY_SEQ =1
        <!--        and status = 'Y' -->
        ) order by 1
    </select>

    <select id="getWOuter" resultType="com.example.Spring_Project.dto.ProductDTO">
        SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category FROM (
        SELECT rownum rn, a.*
        from
        ( SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category
        FROM PRODUCT p WHERE category = 2 and status = 'Y') a) WHERE rn BETWEEN #{start} AND #{end}
    </select>

    <select id="getWTop" resultType="com.example.Spring_Project.dto.ProductDTO">
        SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category
        FROM PRODUCT p WHERE category = 3 and status = 'Y'
    </select>

    <select id="getWPants" resultType="com.example.Spring_Project.dto.ProductDTO">
        SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category
        FROM PRODUCT p WHERE category = 4 and status = 'Y'
    </select>

    <select id="getWAccessories" resultType="com.example.Spring_Project.dto.ProductDTO">
        SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category
        FROM PRODUCT p WHERE category = 5 and status = 'Y'
    </select>


    <select id="getMProduct" resultType="com.example.Spring_Project.dto.ProductDTO">
        SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category
        FROM PRODUCT p WHERE category IN (
        SELECT category_seq FROM category WHERE PARENT_CATEGORY_SEQ =6 and status = 'Y') order by 1
    </select>


    <select id="getMOuter" resultType="com.example.Spring_Project.dto.ProductDTO">
        SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category
        FROM PRODUCT p WHERE category = 7 and status = 'Y'
    </select>

    <select id="getMTop" resultType="com.example.Spring_Project.dto.ProductDTO">
        SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category
        FROM PRODUCT p WHERE category = 8 and status = 'Y'
    </select>
    <select id="getMPants" resultType="com.example.Spring_Project.dto.ProductDTO">
        SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category
        FROM PRODUCT p WHERE category = 9 and status = 'Y'
    </select>
    <select id="getMAccessories" resultType="com.example.Spring_Project.dto.ProductDTO">
        SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category
        FROM PRODUCT p WHERE category = 10 and status = 'Y'
    </select>


    <select id="getNewProduct" resultType="com.example.Spring_Project.dto.ProductDTO">
        SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category
        FROM PRODUCT p WHERE category IN (
        SELECT category_seq FROM category WHERE PARENT_CATEGORY_SEQ =11 and status = 'Y') order by 1
    </select>

    <select id="getNewOuter" resultType="com.example.Spring_Project.dto.ProductDTO">
        SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category
        FROM PRODUCT p WHERE category = 12 and status = 'Y'
    </select>

    <select id="getNewTop" resultType="com.example.Spring_Project.dto.ProductDTO">
        SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category
        FROM PRODUCT p WHERE category = 13 and status = 'Y'
    </select>

    <select id="getNewPants" resultType="com.example.Spring_Project.dto.ProductDTO">
        SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category
        FROM PRODUCT p WHERE category = 14 and status = 'Y'
    </select>

    <select id="getNewAccessories" resultType="com.example.Spring_Project.dto.ProductDTO">
        SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category
        FROM PRODUCT p WHERE category = 15 and status = 'Y'
    </select>


    <select id="getOptions" resultType="com.example.Spring_Project.dto.OptionDTO">
        select
        option_seq,
        category,
        name,
        stock,
        status,
        pd_seq
        from options
        where pd_seq=#{pd_seq}
    </select>


    <select id="getCategory" resultType="String">
        SELECT category
        FROM (
        SELECT category,count(*)
        FROM OPTIONS
        WHERE pd_seq=#{pd_seq}
        GROUP BY category)
    </select>

    <select id="optionByCategory" resultType="String">
        SELECT category
        FROM (
        SELECT category,count(*)
        FROM OPTIONS
        WHERE pd_seq=#{pd_seq} and status = 'Y'
        GROUP BY category)
    </select>


    <select id="getOptionByGroup" resultType="com.example.Spring_Project.dto.OptionListDTO">
        SELECT
        name,
        status,
        stock
        FROM OPTIONS
        WHERE category= #{category} and pd_seq=#{pd_seq}
    </select>

    <insert id="insertCart">
        insert into cart
        values(
        cart_seq.nextval,
        #{id},
        #{count},
        #{pd_seq},
        #{optionList}
        ,'Y'
        ,'Y'
        )
    </insert>

    <insert id="insertCartWtOption">
        insert into cart
        values(
        cart_seq.nextval,
        #{id},
        #{count},
        #{pd_seq},
        null
        ,'Y'
        ,'Y'
        )
    </insert>

    <update id="minusOption">
        update options set stock=stock-1 where pd_seq=#{pd_seq} and name=#{optionName}
    </update>

    <update id="minusPd">
        update product set stock=stock-1 where pd_seq=#{pd_seq}
    </update>

    <select id="getOptionStock" resultType="com.example.Spring_Project.dto.OptionDTO">
                select
                option_seq,
                category,
                name,
                stock,
                status,
                pd_seq
                from options
                where pd_seq=#{pd_seq} and name=#{option} FOR UPDATE wait 10
    </select>

    <select id="getPdOptStock" resultType="Integer">
<!--        SELECT-->
<!--        stock-->
<!--        FROM OPTIONS-->
<!--        WHERE pd_seq = #{pd_seq} AND name = #{name} AND category = #{category}-->
<!--        FOR UPDATE wait 10-->
        SELECT
        stock
        FROM OPTIONS
        WHERE pd_seq = #{pd_seq} AND name = #{name} AND category = #{category}
    </select>
    <select id="productOptionStock" resultType="Integer">
        SELECT
        stock
        FROM OPTIONS
        WHERE pd_seq = #{pd_seq} AND name = #{name} AND category = #{category}
        FOR UPDATE wait 100
    </select>

    <select id="checkOptStock" resultType="Integer">
        SELECT
        stock
        FROM OPTIONS
        WHERE pd_seq = #{pd_seq} AND name = #{name} AND category = #{category}
    </select>

    <update id="updateOptionStatus">
        update options set status='N' where option_seq=#{option_seq}
    </update>

    <select id="getPdStock" resultType="Integer">
<!--        select-->
<!--        stock-->
<!--        from product-->
<!--        where pd_seq=#{pd_seq} FOR UPDATE wait 10-->
        select
        stock
        from product
        where pd_seq=#{pd_seq}
    </select>

    <select id="productStock" resultType="Integer">
        select
        stock
        from product
        where pd_seq=#{pd_seq} FOR UPDATE wait 100
    </select>

    <select id="checkPdStock" resultType="Integer">
        select
        stock
        from product
        where pd_seq=#{pd_seq}
    </select>
<!--    <select id="productOptionStock" resultType="Integer">-->
<!--        select-->
<!--        stock-->
<!--        from product-->
<!--        where pd_seq=#{pd_seq} FOR UPDATE wait 10-->
<!--    </select>-->

<!--    <select id="checkOptStock" resultType="Integer">-->
<!--        select-->
<!--        stock-->
<!--        from product-->
<!--        where pd_seq=#{pd_seq}-->
<!--    </select>-->

    <update id="updatePdStatus">
        update product set status='N' where pd_seq=#{pd_seq}
    </update>

    <select id="getCartInfo" resultType="com.example.Spring_Project.dto.CartDTO">
        <!--        select-->
        <!--            cart_seq,-->
        <!--            id,-->
        <!--            count,-->
        <!--            pd_seq,-->
        <!--            options,-->
        <!--            status-->
        <!--        from cart-->
        <!--        where id=#{id}-->
        <!--        and status = 'Y'-->
        select
        c.cart_seq,
        c.id,c.count,
        c.OPTIONS,
        c.status,
        c.PD_SEQ,
        p.NAME,
        p.DESCRIPTION,
        p.PRICE,
        p.STOCK,
        p.IMG,
        p.CATEGORY
        from cart c JOIN product p ON c.pd_seq = p.PD_SEQ
        where c.id=#{id} and c.status = 'Y'
    </select>

    <select id="getCart" resultType="com.example.Spring_Project.dto.CartDTO">
        <!--        select-->
        <!--            cart_seq,-->
        <!--            id,-->
        <!--            count,-->
        <!--            pd_seq,-->
        <!--            options,-->
        <!--            status-->
        <!--        from cart-->
        <!--        where id=#{id}-->
        <!--        and status = 'Y'-->
        select
        c.cart_seq,
        c.id,c.count,
        c.OPTIONS,
        c.status,
        c.PD_SEQ,
        p.NAME,
        p.DESCRIPTION,
        p.PRICE,
        p.STOCK,
        p.IMG,
        p.CATEGORY
        from cart c JOIN product p ON c.pd_seq = p.PD_SEQ
        where c.id=#{id} and c.status = 'Y' and c.flag = 'Y'
    </select>

    <select id="getOptionCategory" resultType="String">
        SELECT DISTINCT category FROM OPTIONS WHERE pd_seq in(
        SELECT pd_seq FROM cart WHERE cart_seq=#{cart_seq})
    </select>

    <update id="deleteItem">
        update cart set status = 'N'
        where cart_seq=#{cart_seq}
    </update>

    <select id="getCartOption" resultType="java.util.Map">
        select
        pd_seq,
        options
        from cart
        where cart_seq=#{cart_seq}
    </select>

    <select id="getOptionCount" resultType="Integer">
        SELECT stock FROM OPTIONS WHERE name=#{option} AND PD_SEQ=#{pd_seq}
    </select>

    <select id="getPdPrice" resultType="Integer">
        select
        price
        from product
        where pd_seq=#{pd_seq}
    </select>

    <select id="getMemberSeq" resultType="Integer">
        select m_seq from member where id=#{id}
    </select>

    <select id="getCoupon" resultType="com.example.Spring_Project.dto.CouponDTO">
        select
        cp_seq,
        title,
        discount
        from coupon
        where m_seq=#{m_seq}
        and status = 'Y'
    </select>

    <update id="updateCount">
        update cart
        set count=#{count}
        where cart_seq=#{cart_seq}
    </update>

    <select id="getChangedPrice" resultType="Integer">
        SELECT #{price}-(#{price}*#{discount})/100 FROM dual
    </select>

    <select id="getDefaultAddress" resultType="String">
        select
        defaultAddress
        from deliInfo
        where id=#{id}
    </select>

    <select id="getAdditionalAddress1" resultType="String">
        select
        additionalAddress1
        from deliInfo
        where id=#{id}
    </select>

    <select id="getAdditionalAddress2" resultType="String">
        select
        additionalAddress2
        from deliInfo
        where id=#{id}
    </select>

    <select id="getName" resultType="String">
        SELECT m.name FROM MEMBER m JOIN DELIINFO d ON m.ID = d.ID WHERE m.id=#{id}
    </select>

    <select id="getPhone" resultType="String">
        SELECT m.phone FROM MEMBER m JOIN DELIINFO d ON m.ID = d.ID WHERE m.id=#{id}
    </select>

    <select id="checkCouponPr" resultType="com.example.Spring_Project.dto.CouponDTO">
        SELECT
        cp_seq,
        title,
        discount,
        m_seq,
        coupon_period,
        status
        FROM coupon WHERE cp_seq in(
        select cp_seq from coupon WHERE trunc(sysdate)-TO_DATE(coupon_period,'YYYYMMDD')>0 and status = 'Y')

    </select>

    <update id="updCoupon">
        update coupon set status = 'N' where cp_seq=#{cp_seq}
    </update>

    <update id="updCartStatus">
        update cart set status = 'N' where id = #{id}
    </update>

    <update id="chgPdCount">
        update product set stock = stock - #{count} where pd_seq = #{pd_seq}
    </update>

    <update id="chgOptionCount">
        update options set stock = stock - #{count} where pd_seq = #{pd_seq} and name = #{option}
    </update>


    <update id="chgOptCount">
        update options set stock = stock - #{count} where pd_seq = #{pd_seq} and name = #{option} and category = #{category}
    </update>

    <select id="getPdSeq" resultType="Integer">
        SELECT pd_seq FROM cart WHERE cart_seq=#{cart_seq}
    </select>

    <update id="updOptionStock">
        update options set stock = 0 where option_seq=#{option_seq} and pd_seq = #{pd_seq}
    </update>

    <select id="likeYN" resultType="Integer">
        <!--        SELECT count(*) FROM likes WHERE id=#{id} AND pd_seq=#{pd_seq} and status = 'Y'-->
        SELECT count(*) FROM likes WHERE id=#{id} AND pd_seq=#{pd_seq}
    </select>

    <insert id="insertLike">
        INSERT INTO likes values(likes_seq.nextval,#{id},#{pd_seq},'Y')
    </insert>

    <update id="cancleLike">
        update likes set status = 'N' where id = #{id} and pd_seq = #{pd_seq}
    </update>

    <select id="getCategorySeq" resultType="Integer">
        SELECT
        category_seq
        FROM CATEGORY WHERE PARENT_CATEGORY_SEQ = (SELECT CATEGORY_SEQ FROM category WHERE name = #{category1}) AND name
        = #{category2}
    </select>

    <insert id="insertPd" parameterType="map">
        insert into
        product
        values(
        pd_seq.nextval,
        #{name},
        #{description},
        #{price},
        #{stock},
        'Y',
        #{img},
        #{category},
        #{point}
        )
    </insert>

    <select id="getPdCurrVal" resultType="Integer">
        select pd_seq.currval from dual
    </select>

    <insert id="insertOption">
        insert into
        options
        values(
        option_seq.nextval,
        #{category},
        #{name},
        #{stock},
        'Y',
        #{pd_seq}
        )
    </insert>

    <select id="isOptExist" resultType="Integer">
        SELECT count(*) FROM OPTIONS WHERE pd_seq=#{pd_seq}
    </select>

    <select id="getOptByGroup" resultType="com.example.Spring_Project.dto.OptionDTO">
        SELECT CATEGORY,name,stock,option_seq FROM OPTIONS WHERE pd_seq = #{pd_seq} and status = 'Y' GROUP BY
        CATEGORY,name,stock,option_seq ORDER BY 1
    </select>

    <update id="deletePd">
        update product set status = 'N' where pd_seq = #{pd_seq}
    </update>

    <select id="getPdInfo" resultType="com.example.Spring_Project.dto.ProductDTO">
        select
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category,
        point
        from product
        where pd_seq = #{pd_seq}
    </select>

    <select id="getPdCategory" resultType="com.example.Spring_Project.dto.CategoryDTO">
        SELECT
        category_seq,
        name,
        parent_category_seq
        FROM category WHERE CATEGORY_SEQ = #{category_seq}
    </select>

    <select id="getPdSubCategory" resultType="com.example.Spring_Project.dto.CategoryDTO">
        SELECT
        category_seq,
        name,
        parent_category_seq
        FROM category WHERE CATEGORY_SEQ = #{category_seq}
    </select>

    <update id="updateImg">
        update product set img=#{img} where pd_seq = #{pd_seq}
    </update>

    <update id="updPdImg">
        update product set img = #{img} where pd_seq = #{pd_seq}
    </update>
    <update id="updProduct" parameterType="map">
        update product
        set
        name = #{name},
        description = #{description},
        price = #{price},
        stock = ${stock},
        category = #{category_seq},
        point = #{point}
        where
        pd_seq = #{pd_seq}
    </update>

    <update id="updOptionStatus">
        delete from options
        where option_seq = #{option_seq}
    </update>

    <select id="getNextOptSeq" resultType="Integer">
        select option_seq.nextval from dual
    </select>

    <insert id="insertNewOptions">
        insert into
        options
        values(
        #{option_seq},
        #{category},
        #{option_name},
        #{option_stock},
        'Y',
        #{pd_seq}
        )
    </insert>

    <update id="updOptions">
        update options
        set
        category = #{category},
        name = #{option_name},
        stock =#{option_stock},
        status = 'Y'
        where option_seq = #{option_seq}
    </update>

    <select id="getProductsByKeyword" resultType="com.example.Spring_Project.dto.ProductDTO">
        <!--        select-->
        <!--        pd_seq,-->
        <!--        name,-->
        <!--        description,-->
        <!--        price,-->
        <!--        stock,-->
        <!--        status,-->
        <!--        img,-->
        <!--        category-->
        <!--        from product-->
        <!--        where status = 'Y'-->
        <!--        and LOWER(name) like '%'||#{keyword}||'%'-->

        SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category
        FROM (
        SELECT ROWNUM rn, a.*
        from
        (select
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category
        from product
        where
        <!--        -->
        LOWER(name) like '%'||#{keyword}||'%') a) b WHERE rn BETWEEN #{start} AND #{end}
    </select>

    <select id="cartInfo" resultType="com.example.Spring_Project.dto.CartDTO">
        select
        c.cart_seq,
        c.id,c.count,
        c.OPTIONS,
        c.status,
        c.PD_SEQ,
        p.NAME,
        p.DESCRIPTION,
        p.PRICE,
        p.STOCK,
        p.IMG,
        p.CATEGORY
        from cart c JOIN product p ON c.pd_seq = p.PD_SEQ
        where c.cart_seq=#{cart_seq} and c.status = 'Y'
    </select>

    <select id="getPdCount" resultType="Integer">
        select
        count
        from cart
        where cart_seq = #{cart_seq}
    </select>

    <select id="getOption" resultType="String">
        select
        options
        from cart
        where cart_seq = #{cart_seq}
    </select>

    <select id="getId" resultType="Integer">
        select
        count(*)
        from buyPd
        where id = #{id}
    </select>

    <insert id="insertBuyPd">
        insert into buyPd
        values(
        buyPd_seq.nextval,
        #{id},
        #{sum},
        #{price}
        )
    </insert>

    <update id="updateBuyPd">
        update buyPd set total_sum = #{sum}, total_price = #{price}
        where id = #{id}
    </update>

    <select id="getSum" resultType="Integer">
        select total_sum from buyPd where id = #{id}
    </select>

    <select id="getPrice" resultType="Integer">
        select total_price from buyPd where id = #{id}
    </select>

    <update id="updCartFlag">
        update cart set flag = 'N' where cart_seq = #{cart_seq}
    </update>

    <update id="updFlagToY">
        update cart set flag = 'Y' where cart_seq = #{cart_seq}
    </update>


    <select id="getDeliveryInfo" resultType="com.example.Spring_Project.dto.DeliDTO">
        select
        seq,
        id,
        name,
        phone,
        address,
        nickname,
        status
        from deliInfo
        where id = #{id} and flag = 'Y'
        order by status desc

    </select>

    <select id="deliveryInfo" resultType="com.example.Spring_Project.dto.DeliDTO">
        select
        id,
        name,
        phone,
        address,
        nickname,
        status
        from deliInfo
        where id = #{id}
        order by status desc
    </select>

    <insert id="insertDeli">
        insert into deliInfo
        values(
        seq.nextval,
        #{id},
        #{name},
        #{phone},
        #{address},
        #{nickname},
        #{flag},
        'Y'
        )
    </insert>

    <select id="getSeqDeli" resultType="com.example.Spring_Project.dto.DeliDTO">
        select
        seq,
        id,
        name,
        phone,
        address,
        nickname,
        status
        from deliInfo
        where seq = #{seq}
        order by status desc
    </select>

    <select id="getCurrval" resultType="Integer">
        select seq.currval from dual
    </select>

    <update id="updDeliStatus">
        UPDATE deliInfo SET status = 'N' WHERE seq NOT in(#{seq})
    </update>

    <update id="updDeli">
        UPDATE deliInfo SET
        name = #{name},
        phone = #{phone},
        address = #{address},
        nickname = #{nickname},
        status = #{flag}
        where seq = #{seq}
    </update>

    <update id="deleteDeli">
        update deliInfo set flag = 'N' where seq = #{seq}
    </update>


    <update id="updStatus">
        update deliInfo set status = 'Y' where seq = #{seq}
    </update>

    <select id="getDefaultAddr" resultType="com.example.Spring_Project.dto.DeliDTO">
        select
        seq,
        id,
        name,
        phone,
        address,
        nickname,
        status
        from deliInfo
        where status = 'Y'
    </select>

    <select id="currPaySeq" resultType="Integer">
        select
        pay_seq.currval
        from dual
    </select>

    <insert id="insertPayProduct">
        insert into payProduct
        values(
        payPd_seq.nextval,
        #{payPd_seq},
        #{pd_seq},
        #{option},
        'N',
        null,
        #{count},
        null
        )
    </insert>

    <insert id="insertPayPd">
        insert into payProduct(payPd_seq,pay_seq,pd_seq,deliYN,code,count,postNum)
        values(
        payPd_seq.nextval,
        #{pay_seq},
        #{pd_seq},
        'N',
        null,
        #{count},
        null
        )
    </insert>

    <select id="getDefaultAdr" resultType="Integer">
        select seq
        from deliInfo
        where status = 'Y'
    </select>

    <select id="getHistory" resultType="java.util.Map">

        SELECT pd_seq,payPd_seq,deli_seq,price,TO_CHAR(PAYDATE,'YYYY-MM-DD HH:MI') AS
        PAYDATE,PAYMETHOD,OPTIONS,totalPayPdCnt,payPdCnt,pay_seq,usedPoint
        from( SELECT ROWNUM rn, a.* FROM(SELECT
        pd_seq,
        payPd_seq,
        p.deli_seq,
        p.price,
        p.PAYDATE,
        PAYMETHOD,
        OPTIONS,
        p.count AS totalPayPdCnt,
        pp.count AS payPdCnt,
        code,
        p.pay_seq,
        usedPoint
        FROM payInfo p JOIN PAYPRODUCT pp
        ON p.PAY_SEQ = pp.pay_seq
        WHERE p.id = #{id} and status = 'Y'
        ORDER BY PAYDATE DESC) a)
        where rn between #{start} AND #{end}


        <!--        SELECT pd_seq,payPd_seq,deli_seq,price,TO_CHAR(PAYDATE,'YYYY-MM-DD HH:MI') AS PAYDATE,PAYMETHOD,OPTIONS,COUNT, deliYN,code-->
        <!--        from( SELECT ROWNUM rn, a.* FROM(SELECT-->
        <!--        pd_seq,-->
        <!--        payPd_seq,-->
        <!--        deli_seq,-->
        <!--        price,-->
        <!--        PAYDATE,-->
        <!--        PAYMETHOD,-->
        <!--        OPTIONS,-->
        <!--        count,-->
        <!--        deliYN,-->
        <!--        code-->
        <!--        FROM payInfo p JOIN PAYPRODUCT pp-->
        <!--        ON p.PAY_SEQ = pp.pay_seq-->
        <!--        WHERE p.id = #{id}-->
        <!--        ORDER BY PAYDATE DESC) a)-->
        <!--        where rn between #{start} and #{end}-->

    </select>

    <select id="getDeliInfoBySeq" resultType="com.example.Spring_Project.dto.DeliDTO">
        select
        name,
        phone,
        address
        from deliInfo
        where seq = #{deli_seq}
    </select>

    <select id="getOptCategory" resultType="String">
        SELECT
        category
        FROM OPTIONS
        WHERE pd_seq = #{pd_seq} AND name = #{optName}
    </select>

    <select id="countPost" resultType="Integer">
        select
        count(*)
        from PAYPRODUCT
    </select>

    <select id="salesPdCount" resultType="Integer">
        select
        count(*)
        from sales
    </select>

    <select id="getPayDate" resultType="java.sql.Timestamp">
        select
        payDate
        from payInfo
        where pay_seq = #{pay_seq}
    </select>

    <insert id="insertSales">
        insert into sales
        values(
        sales_seq.nextval,
        #{id},
        #{pd_seq},
        #{stock},
        #{productPrice},
        #{option, jdbcType=VARCHAR},
        #{salesDate},
        #{payPdSeq}
        )
    </insert>

    <select id="getSalesList" resultType="com.example.Spring_Project.dto.SalesDTO">
        SELECT sales_seq,
        id,
        pd_seq,
        stock,
        price,
        pdOption,
        to_char(salesDate,'YYYY-MM-DD HH24:MI') AS salesDate
        from( SELECT ROWNUM rn, a.* FROM(select
        sales_seq,
        id,
        pd_seq,
        stock,
        price,
        pdOption,
        salesDate
        from sales
        ORDER BY salesDate DESC) a)
        where rn between #{start} and #{end}
    </select>

    <select id="getCourierInfo" resultType="com.example.Spring_Project.dto.CourierDTO">
        select
        name,
        code,
        orders
        from courier
    </select>

    <insert id="insert">
        insert into courier
        values(
        courier_seq.nextval,
        #{name},
        #{code},
        #{code}
        )
    </insert>

    <select id="getCourierCode" resultType="Integer">
        select
        code
        from courier
        where name = #{name}
    </select>

    <update id="deliveryStatus">
        update sales set deliYN = 'Y', courierCode = #{code}
        where sales_seq = #{sales_seq}
    </update>

    <select id="getPayInfo" resultType="com.example.Spring_Project.dto.PayInfoDTO">
        select * from payInfo where pay_seq = #{pay_seq}
    </select>

    <select id="getCurrPayPdSeq" resultType="Integer">
        select payPd_seq.currval
        from dual
    </select>

    <select id="productCnt" resultType="Integer">
        select count(*) from product
        where status = 'Y'
        <if test="keyword != null">
            and LOWER(name) like '%'||#{keyword}||'%'
        </if>
    </select>

    <select id="getDeliYN" resultType="com.example.Spring_Project.dto.PayProductDTO">
        SELECT deliYN,code FROM payProduct WHERE payPd_seq = (
        SELECT payPd_seq FROM sales WHERE sales_seq = #{salesSeq})
    </select>

    <select id="updDeliveryStatus" resultType="Integer">
        UPDATE
        (SELECT deliYN,code,postNum FROM PAYPRODUCT p WHERE PAYPD_SEQ =
        ( SELECT payPd_seq FROM sales WHERE sales_seq = #{sales_seq}))
        SET deliYN = 'M',code = #{code},postNum = #{postNum}
    </select>

    <select id="getPayProductInfo" resultType="com.example.Spring_Project.dto.PayProductDTO">
        SELECT DELIYN , CODE FROM PAYPRODUCT p WHERE pay_seq = #{pay_seq} AND PD_SEQ = #{pd_seq}
    </select>

    <select id="getParentCategory" resultType="String">
        SELECT name FROM category WHERE PARENT_CATEGORY_SEQ =0
    </select>

    <select id="getChildCategory" resultType="String">
        SELECT DISTINCT name FROM category WHERE PARENT_CATEGORY_SEQ NOT IN 0
    </select>

    <select id="parentCategorySeq" resultType="Integer">
        SELECT category_seq FROM category WHERE name = #{parentCtgOption}
    </select>

    <select id="pdCategorySeq" resultType="Integer">
        SELECT category_seq FROM category WHERE PARENT_CATEGORY_SEQ = #{seq} AND name = #{option}
    </select>

    <select id="revCategory" resultType="map">
        SELECT
        cc.name AS parentCategory,
        pc.name AS childCategory
        FROM (
        SELECT
        name,
        category_seq,
        parent_category_seq
        FROM CATEGORY c
        WHERE CATEGORY_SEQ = #{cSeq}) cc
        JOIN
        (
        SELECT
        name,
        category_seq,
        parent_category_seq
        FROM category
        WHERE category_seq = #{pSeq}) pc
        ON cc.parent_category_seq = pc.category_seq
    </select>

    <select id="searchPdCnt" resultType="Integer">
        select
        count(*)
        from product
        where status = 'Y'
        and LOWER(name) like '%'||#{keyword}||'%'
    </select>

    <select id="wOuterCnt" resultType="Integer">
        SELECT count(*)
        FROM PRODUCT p WHERE category = 2
        <!--        and status = 'Y'-->
    </select>

    <select id="wCnt" resultType="Integer">
        SELECT count(*)
        FROM PRODUCT p WHERE category in (2,3,4,5)
        <!--        and status = 'Y'-->
    </select>
    <select id="mCnt" resultType="Integer">
        SELECT count(*)
        FROM PRODUCT p WHERE category in (7,8,9,10)
        <!--        and status = 'Y'-->
    </select>
    <select id="nCnt" resultType="Integer">
        SELECT count(*)
        FROM PRODUCT p WHERE category in (12,13,14,15)
        <!--        and status = 'Y'-->
    </select>

    <select id="wTopCnt" resultType="Integer">
        SELECT count(*)
        FROM PRODUCT p WHERE category = 3
        <!--        and status = 'Y'-->
    </select>

    <select id="wPantsCnt" resultType="Integer">
        SELECT count(*)
        FROM PRODUCT p WHERE category = 4
        <!--        and status = 'Y'-->
    </select>

    <select id="wAccCnt" resultType="Integer">
        SELECT count(*)
        FROM PRODUCT p WHERE category = 5
        <!--        and status = 'Y'-->
    </select>

    <select id="mOuter" resultType="Integer">
        SELECT count(*)
        FROM PRODUCT p WHERE category = 7
    </select>
    <select id="mTop" resultType="Integer">
        SELECT count(*)
        FROM PRODUCT p WHERE category = 8
    </select>
    <select id="mPants" resultType="Integer">
        SELECT count(*)
        FROM PRODUCT p WHERE category = 9
    </select>
    <select id="mAcc" resultType="Integer">
        SELECT count(*)
        FROM PRODUCT p WHERE category = 10
    </select>
    <select id="nOuter" resultType="Integer">
        SELECT count(*)
        FROM PRODUCT p WHERE category = 12
    </select>
    <select id="nTop" resultType="Integer">
        SELECT count(*)
        FROM PRODUCT p WHERE category = 13
    </select>
    <select id="nPants" resultType="Integer">
        SELECT count(*)
        FROM PRODUCT p WHERE category = 14
    </select>
    <select id="nAcc" resultType="Integer">
        SELECT count(*)
        FROM PRODUCT p WHERE category = 15
    </select>

    <select id="pdCountByMen" resultType="Integer">
        SELECT count(*) FROM product WHERE category in (7,8,9,10)
    </select>
    <select id="pdCountByNew" resultType="Integer">
        SELECT count(*) FROM product WHERE category in (12,13,14,15)
    </select>

    <update id="updMemPoint">
        update member set point = point - #{usedPoint} + #{newPoint} where id = #{id}
    </update>

    <select id="getMemPoint" resultType="Integer">
        select point from member where id = #{id}
    </select>


    <select id="getPercent" resultType="double">
        select point from product where pd_seq = #{pd_seq}
    </select>

    <select id="refundPdInfo" resultType="map">

        SELECT
        a.pay_seq,
        a.payPd_seq,
        a.pd_seq,
        a.OPTIONS,
        a.payDate,
        a.payMethod,
        a.count,
        p.price,
        a.id
        FROM product p JOIN (
        SELECT
        pi.pay_seq,
        pp.payPd_seq,
        pp.pd_seq,
        pp.options,
        id,
        to_char(payDate,'YYYY-MM-DD HH24:MI') AS payDate,
        payMethod,
        pp.count
        FROM payInfo pi JOIN (
        SELECT
        payPd_seq,
        pay_seq,
        pd_seq,
        options,
        count
        FROM payProduct
        WHERE payPd_seq = #{payPdSeq}) pp
        on pi.pay_seq = pp.pay_seq) a on p.pd_seq = a.pd_seq
    </select>

    <insert id="insertRefund" parameterType="map">
        insert into refund values(
        refund_seq.nextval,
        #{id},
        #{payPd_seq},
        #{content},
        null,
        'M',
        sysdate,
        'refund'
        )
    </insert>

    <insert id="insertExchange" parameterType="map">
        insert into refund values(
        refund_seq.nextval,
        #{id},
        #{payPd_seq},
        #{content},
        #{deli_seq},
        'M',
        sysdate,
        'exchange'
        )
    </insert>

    <select id="refundInfo" resultType="com.example.Spring_Project.dto.RefundDTO">
        select
        refund_seq,
        id,
        payPd_seq,
        content,
        deli_seq,
        status,
        applyDate,
        type
        from refund
        where payPd_seq = #{payPd_seq} and status not in 'N'
    </select>

    <select id="refundCount" resultType="Integer">
        select count(*) from refund
    </select>

    <select id="refundCntByType" resultType="Integer">
        select count(*) from refund
        <if test="type != 'all'.toString()">
            where type = #{type}
        </if>
    </select>

    <select id="refundList" resultType="com.example.Spring_Project.dto.RefundDTO">
        SELECT
        refund_seq,
        id,
        payPd_seq,
        content,
        deli_seq,
        status,
        applyDate,
        type
        from( SELECT ROWNUM rn, a.* FROM(
        select
        refund_seq,
        id,
        payPd_seq,
        content,
        deli_seq,
        status,
        to_char(applyDate,'YYYY-DD-MM HH24:MI') AS applyDate,
        type
        from refund
        where status not in 'N'
        ORDER BY 7 DESC) a)
        where rn between #{start} and #{end}
    </select>

    <select id="refundListByType" resultType="com.example.Spring_Project.dto.RefundDTO">
        SELECT
        refund_seq,
        id,
        payPd_seq,
        content,
        deli_seq,
        status,
        applyDate,
        type
        from( SELECT ROWNUM rn, a.* FROM(
        select
        refund_seq,
        id,
        payPd_seq,
        content,
        deli_seq,
        status,
        to_char(applyDate,'YYYY-DD-MM HH24:MI') AS applyDate,
        type
        from refund
        where status not in 'N'
        <if test="type != 'all'.toString()">
            and type = #{type}
        </if>
        ORDER BY 7 DESC) a)
        where rn between #{start} and #{end}
    </select>


    <select id="payPdInfo" resultType="com.example.Spring_Project.dto.PayProductDTO">
        select
        pay_seq,
        pd_seq,
        options,
        deliYN,
        code,
        count,
        postNum
        from payProduct
        where payPd_seq = #{payPd_seq}
    </select>


    <select id="refundInfoByPayPd_seq" resultType="com.example.Spring_Project.dto.ShopRefundDTO">
        select
        sr_seq,
        refund_seq,
        status,
        code,
        postNum,
        deliStatus
        from shopRefund
        where refund_seq = #{refund_seq} and status not in 'N'
    </select>

    <!--    <update id="updRefundStatus">-->
    <!--        update refund set status = 'Y' where refund_seq = #{refund_seq}-->
    <!--    </update>-->

    <select id="getDeliStatusByRefundSeq" resultType="String">
        SELECT deliStatus FROM shopRefund WHERE refund_seq IN ( SELECT refund_seq FROM refund WHERE refund_seq =
        #{refund_seq})
    </select>

    <select id="getRefundDetail" resultType="com.example.Spring_Project.dto.RefundDetailDTO">
        SELECT
        pd.price AS originalPdPrice,
        pay_seq,
        payTotalPrice,
        payTotalSum,
        usedPoint,
        a.pd_seq,
        OPTIONS,
        refundPdCount,
        a.id
        FROM product pd JOIN (
        SELECT
        p.pay_seq,
        i.price AS payTotalPrice,
        i.count AS payTotalSum,
        usedPoint,
        p.pd_seq,
        OPTIONS,
        p.count AS refundPdCount,
        id
        FROM payInfo i JOIN (
        SELECT
        pd_seq,
        OPTIONS,
        count,
        pay_seq
        FROM payProduct WHERE payPd_seq = #{payPd_seq}) p ON i.pay_seq = p.pay_seq) a ON pd.PD_SEQ = a.pd_seq
    </select>

    <update id="increaseMemPoint">
        update
        member
        set point = #{refundPoint}
        where id = #{id}
    </update>

    <select id="checkOptionStockBySeq" resultType="Integer">
        select stock from options where option_seq = #{option_seq}
    </select>

    <select id="getPayPdCnt" resultType="Integer">
        SELECT count(*) FROM payProduct WHERE pay_seq = #{pay_seq}
    </select>

    <select id="isPdInCart" resultType="Integer">
        select count(*) from cart where status = 'Y' and id = #{id} and pd_seq = #{pd_seq}
    </select>

    <select id="isPdInCartWtOpt" resultType="Integer">
        select count(*) from cart where status = 'Y' and id = #{id} and pd_seq = #{pd_seq} and options = #{options}
    </select>

    <select id="isRefundApprove" resultType="Integer">
        select count(*) from shopRefund where refund_seq = #{refund_seq}
    </select>

    <select id="refundData" resultType="Hashmap">
        SELECT a.pay_seq,
        a.payPd_seq,
        a.pd_seq,
        a.OPTIONS,
        a.payDate,
        a.payMethod,
        a.count,
        a.price,
        a.id,
        r.content,
        r.content,
        r.applyDate,
        r.status
        FROM refund r JOIN (
        SELECT
        a.pay_seq,
        a.payPd_seq,
        a.pd_seq,
        a.OPTIONS,
        a.payDate,
        a.payMethod,
        a.count,
        p.price,
        a.id
        FROM product p JOIN (
        SELECT
        pi.pay_seq,
        pp.payPd_seq,
        pp.pd_seq,
        pp.options,
        id,
        to_char(payDate,'YYYY-MM-DD HH24:MI') AS payDate,
        payMethod,
        pp.count
        FROM payInfo pi JOIN (
        SELECT
        payPd_seq,
        pay_seq,
        pd_seq,
        options,
        count
        FROM payProduct
        WHERE payPd_seq = #{payPdSeq}) pp
        on pi.pay_seq = pp.pay_seq) a on p.pd_seq = a.pd_seq) a ON a.payPd_seq = r.payPd_seq where r.status not in 'N'
    </select>

    <update id="updRefundStatus">
        update refund set status = 'N' where payPd_seq = #{payPd_seq}
    </update>

    <update id="chgRefundStatus">
        update refund set status = 'Y' where payPd_seq = #{payPd_seq} and refund_seq = #{refund_seq}
    </update>

    <select id="refundYN" resultType="Integer">
        select count(*) from refund where payPd_seq = #{payPd_seq} and status not in 'N'
    </select>

    <select id="getParentCategorySeq" resultType="Integer">
        SELECT category_seq FROM category WHERE name = #{parentCategory}
    </select>


    <select id="getChildCategorySeq" resultType="Integer">
        SELECT category_seq FROM category WHERE name = #{childCategory} AND PARENT_CATEGORY_SEQ = #{parent_category_seq}
    </select>

    <select id="pdCntByCategory" resultType="Integer">
        SELECT count(*) FROM product WHERE category = #{child_category_seq}
    </select>

    <select id="pdCountByParent_category" resultType="Integer">
        SELECT count(*) FROM product WHERE category in (2,3,4,5)
    </select>


    <select id="pdListByCategory" resultType="com.example.Spring_Project.dto.ProductDTO">
        SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category FROM (
        SELECT rownum rn, a.*
        from
        ( SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category
        FROM PRODUCT p WHERE category = #{child_category_seq} and status = 'Y') a) WHERE rn BETWEEN #{start} AND #{end}
    </select>


    <select id="pdListByParentCategory" resultType="com.example.Spring_Project.dto.ProductDTO">
        SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category FROM (
        SELECT rownum rn, a.*
        from
        ( SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category
        FROM PRODUCT p WHERE category in (2,3,4,5)) a) WHERE rn BETWEEN #{start} AND #{end}
    </select>

    <select id="pdListByMen" resultType="com.example.Spring_Project.dto.ProductDTO">
        SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category FROM (
        SELECT rownum rn, a.*
        from
        ( SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category
        FROM PRODUCT p WHERE category in (7,8,9,10)) a) WHERE rn BETWEEN #{start} AND #{end}
    </select>

    <select id="pdListByNew" resultType="com.example.Spring_Project.dto.ProductDTO">
        SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category FROM (
        SELECT rownum rn, a.*
        from
        ( SELECT
        pd_seq,
        name,
        description,
        price,
        stock,
        status,
        img,
        category
        FROM PRODUCT p WHERE category in (12,13,14,15)) a) WHERE rn BETWEEN #{start} AND #{end}
    </select>

    <select id="getPayProductDTO" resultType="com.example.Spring_Project.dto.PayProductDTO">
        select
            payPd_seq,
            pay_seq,
            pd_seq,
            options,
            count
        from payProduct where payPd_seq = #{payPd_seq}
    </select>

    <update id="updPdStock">
        update product set stock = stock + #{count}
        where pd_seq = #{pd_seq}
    </update>

    <update id="updPdOptionStock">
        update
          options
        set stock = stock + #{count}
        where pd_seq = #{pd_seq} and category = #{optCategory} and name = #{optName}
    </update>

    <select id="getOptionDTO" resultType="com.example.Spring_Project.dto.OptionDTO">
        select
            option_seq,
            category,
            name,
            stock,
            pd_seq,
            status
        from options
        where pd_seq = #{pd_seq} and category = #{optCategory} and name = #{optName}
    </select>
    <select id="optionInfo" resultType="com.example.Spring_Project.dto.OptionDTO">
        select
            option_seq,
            category,
            name,
            stock,
            pd_seq,
            status
        from options
        where pd_seq = #{pd_seq} and category = #{category} and name = #{name}
    </select>
</mapper>
